#   tidyr::gather(key = min,
#                 value = act,
#                 act_1:act_60)
#
# long_light <- wide_data %>%
#   dplyr::select(-dplyr::matches('act')) %>%
#   tidyr::gather(key = min,
#                 value = light,
#                 light_1:light_60)
#
# dat <- long_act %>%
#   dplyr::as_data_frame() %>%
#   tidyr::separate(col = min, into = c('trash', 'min')) %>%
#   dplyr::select(-trash) %>%
#   dplyr::mutate(min = as.integer(min),
#                 light = long_light$light)
#
# # don't know what to do with very rare act = -61, just set to NA
# # 1 such row in test data (4 mice, 90 days per mouse)
# dat$act[d$act < -1] <- NA
#
# # not sure waht act = -1 means...probably some error code
# # like "couldn't measure activity"
# # 24 such rows in test data (4 mice, 90 days per mouse)
# dat$act[d$act == -1] <- NA
#
dat <- data
return(dat)
}
f <- file.path("~/GitHub/circr/hop_data/")
dat <- read_clock_file(file_name = list.files(path = f, full.names = TRUE)[1])
read_clock_file <- function(file_name) {
#act <- act_1 <- act_60 <- light <- light_1 <- light_60 <- trash <- 'fake_global_for_CRAN'
# file_name_byte_length <- 4
# bytes_per_hours_data <- 172
#
# file_name_start <- 4
# file_name_end <- 23
#
# date_start <- 28
# date_end <- 37
#
# seconds_start <- 38
# seconds_end <- 41
#
# hour_offset <- 42
#
# counts_start <- 48
# counts_end <- 107
#
# light_start <- 112
# light_end <- 171
#data <- readr::read_file_raw(file = file_name)
data <- read_delim(file_name, "\t", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE, show_col_types = FALSE)
data <- Filter(function(x)!all(is.na(x)), data)   #removes NA column 61
data <- na.omit(data)   #removes empty rows between birds
colnames(data) <- seq(1,60,1)   # numbers columns as minutes  1-60
data$filename <- file_name
data$Cage <- rep(1:24, each=24)    #names cages 1-24
data$Hour <- rep(seq(0,23,1), 24)   #assigns hours 0-23
data <- data %>% gather(Minutes, Hops, 1:60)
data$Minutes <- as.numeric(data$Minutes)
#Assign day/night to the correct hours
data$Phase <- NA
for (i in 1:nrow(data)) {
if (data$Hour[i] < 7 | data$Hour[i] >= 19) {
data$Phase[i] <- 'night'
}
if (data$Hour[i] >= 7 & data$Hour[i] < 19) {
data$Phase[i] <- 'day'
}
}
## re-format date
name <- paste(file_name)
#need to change this to be whatever input is
name <- gsub('C:/Users/Cassa/Documents/GitHub/circr/hop_data/', '', name)
name <- gsub('\\s', '-', name)
name <- gsub(',-', '-', name)
name <- gsub('.txt', '', name)
data$Date <- name
data$Date<- as.Date(data$Date, "%B-%d-%Y")
#Add treatment IDs
data$treat <- NA
for (i in 1:nrow(data)){
if (data$Cage[i]== 4 | data$Cage[i] == 6 | data$Cage[i]== 7 | data$Cage[i] == 13 | data$Cage[i] == 16 | data$Cage[i]==18 | data$Cage[i]== 21 | data$Cage[i]== 22 | data$Cage[i]== 23 | data$Cage[i]== 24) {
data$treat[i] <- "LD"}
if (data$Cage[i]== 1 | data$Cage[i] == 2 | data$Cage[i]== 3 | data$Cage[i] == 8 | data$Cage[i] == 14 | data$Cage[i]== 15 | data$Cage[i]== 20) {
data$treat[i] <- "LL"}
}
# data_length <- readBin(con = data[1:4],
#                        what = 'integer',
#                        size = file_name_byte_length,
#                        endian = 'big')
#
# num_hours <- num_hours <- (data_length - file_name_byte_length)/bytes_per_hours_data
#
# filenames <- dates <- hours <- seconds <- acts <- lights <- list()
#
# for (hour in 1:num_hours) {
#
#   hour_start <- (hour - 1)*bytes_per_hours_data + 5
#
#   filenames[[hour]] <- readBin(con = data[hour_start + (file_name_start:file_name_end)],
#                                what = 'character',
#                                endian = 'big')
#
#   dates[[hour]] <- readBin(con = data[hour_start + (date_start:date_end)],
#                            what = 'character',
#                            endian = 'big')
#
#   hours[[hour]] <- readBin(con = data[hour_start + hour_offset],
#                            what = 'integer',
#                            n = 1,
#                            size = 1,
#                            endian = 'big')
#
#   # browser()
#   # doesn't work -- need to read a 4-byte unsigned int
#   # seconds[[hour]] <- readBin(con = data[hour_start + (seconds_start:seconds_end)],
#   #                            what = 'integer',
#   #                            size = 2,
#   #                            n = 1,
#   #                            endian = 'big',
#   #                            signed = FALSE)
#
#   acts[[hour]] <- readBin(con = data[hour_start + (counts_start:counts_end)],
#                           what = 'integer',
#                           n = 60,
#                           size = 1,
#                           endian = 'big')
#
#   lights[[hour]] <- readBin(con = data[hour_start + (light_start:light_end)],
#                             what = 'integer',
#                             n = 60,
#                             size = 1,
#                             endian = 'big')
# }
#
# stopifnot(all(is.character(unlist(x = filenames))))
# stopifnot(length(unique(unlist(x = filenames))) == 1)
#
# acts <- do.call(what = rbind, args = acts)
# colnames(acts) <- paste0('act_', 1:60)
#
# lights <- do.call(what = rbind, args = lights)
# colnames(lights) <- paste0('light_', 1:60)
#
# wide_data <- cbind(data.frame(file_name = file_name,
#                               date = lubridate::mdy(unlist(dates)),
#                               hour = unlist(hours)
#                               #,second = unlist(seconds)
# ),
# acts,
# lights)
#
# long_act <- wide_data %>%
#   dplyr::select(-dplyr::matches('light')) %>%
#   tidyr::gather(key = min,
#                 value = act,
#                 act_1:act_60)
#
# long_light <- wide_data %>%
#   dplyr::select(-dplyr::matches('act')) %>%
#   tidyr::gather(key = min,
#                 value = light,
#                 light_1:light_60)
#
# dat <- long_act %>%
#   dplyr::as_data_frame() %>%
#   tidyr::separate(col = min, into = c('trash', 'min')) %>%
#   dplyr::select(-trash) %>%
#   dplyr::mutate(min = as.integer(min),
#                 light = long_light$light)
#
# # don't know what to do with very rare act = -61, just set to NA
# # 1 such row in test data (4 mice, 90 days per mouse)
# dat$act[d$act < -1] <- NA
#
# # not sure waht act = -1 means...probably some error code
# # like "couldn't measure activity"
# # 24 such rows in test data (4 mice, 90 days per mouse)
# dat$act[d$act == -1] <- NA
#
dat <- data
return(dat)
}
f <- file.path("~/GitHub/circr/hop_data/")
dat <- read_clock_file(file_name = list.files(path = f, full.names = TRUE)[1])
rlang::last_error()
read_clock_files <- function(file_names) {
bird_data <- list()
for (file_name in file_names) {
bird_data[[file_name]] <- read_clock_file(file_name = file_name)
}
dat <- do.call(what = rbind,
args = bird_data)
return(dat)
}
read_clock_file <- function(file_name) {
#act <- act_1 <- act_60 <- light <- light_1 <- light_60 <- trash <- 'fake_global_for_CRAN'
# file_name_byte_length <- 4
# bytes_per_hours_data <- 172
#
# file_name_start <- 4
# file_name_end <- 23
#
# date_start <- 28
# date_end <- 37
#
# seconds_start <- 38
# seconds_end <- 41
#
# hour_offset <- 42
#
# counts_start <- 48
# counts_end <- 107
#
# light_start <- 112
# light_end <- 171
#data <- readr::read_file_raw(file = file_name)
data <- read_delim(file_name, "\t", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE, show_col_types = FALSE)
data <- Filter(function(x)!all(is.na(x)), data)   #removes NA column 61
data <- na.omit(data)   #removes empty rows between birds
colnames(data) <- seq(1,60,1)   # numbers columns as minutes  1-60
data$filename <- file_name
data$Cage <- rep(1:24, each=24)    #names cages 1-24
data$Hour <- rep(seq(0,23,1), 24)   #assigns hours 0-23
data <- data %>% gather(Minutes, Hops, 1:60)
data$Minutes <- as.numeric(data$Minutes)
#Assign day/night to the correct hours
data$Phase <- NA
for (i in 1:nrow(data)) {
if (data$Hour[i] < 9 | data$Hour[i] >= 21) {
data$Phase[i] <- "night"
}
if (data$Hour[i] >= 9 & data$Hour[i] < 21) {
data$Phase[i] <- "day"
}
}
## re-format date
name <- paste(file_name)
#need to change this to be whatever input is
name <- gsub('C:/Users/Cassa/Documents/GitHub/circr/hop_data/', '', name)
name <- gsub('\\s', '-', name)
name <- gsub(',-', '-', name)
name <- gsub('.txt', '', name)
data$Date <- name
data$Date<- as.Date(data$Date, "%B-%d-%Y")
#Add treatment IDs
data$treat <- NA
for (i in 1:nrow(data)){
if (data$Cage[i]== 4 | data$Cage[i] == 6 | data$Cage[i]== 7 | data$Cage[i] == 13 | data$Cage[i] == 16 | data$Cage[i]==18 | data$Cage[i]== 21 | data$Cage[i]== 22 | data$Cage[i]== 23 | data$Cage[i]== 24) {
data$treat[i] <- "LD"}
if (data$Cage[i]== 1 | data$Cage[i] == 2 | data$Cage[i]== 3 | data$Cage[i] == 8 | data$Cage[i] == 14 | data$Cage[i]== 15 | data$Cage[i]== 20) {
data$treat[i] <- "LL"}
}
# data_length <- readBin(con = data[1:4],
#                        what = 'integer',
#                        size = file_name_byte_length,
#                        endian = 'big')
#
# num_hours <- num_hours <- (data_length - file_name_byte_length)/bytes_per_hours_data
#
# filenames <- dates <- hours <- seconds <- acts <- lights <- list()
#
# for (hour in 1:num_hours) {
#
#   hour_start <- (hour - 1)*bytes_per_hours_data + 5
#
#   filenames[[hour]] <- readBin(con = data[hour_start + (file_name_start:file_name_end)],
#                                what = 'character',
#                                endian = 'big')
#
#   dates[[hour]] <- readBin(con = data[hour_start + (date_start:date_end)],
#                            what = 'character',
#                            endian = 'big')
#
#   hours[[hour]] <- readBin(con = data[hour_start + hour_offset],
#                            what = 'integer',
#                            n = 1,
#                            size = 1,
#                            endian = 'big')
#
#   # browser()
#   # doesn't work -- need to read a 4-byte unsigned int
#   # seconds[[hour]] <- readBin(con = data[hour_start + (seconds_start:seconds_end)],
#   #                            what = 'integer',
#   #                            size = 2,
#   #                            n = 1,
#   #                            endian = 'big',
#   #                            signed = FALSE)
#
#   acts[[hour]] <- readBin(con = data[hour_start + (counts_start:counts_end)],
#                           what = 'integer',
#                           n = 60,
#                           size = 1,
#                           endian = 'big')
#
#   lights[[hour]] <- readBin(con = data[hour_start + (light_start:light_end)],
#                             what = 'integer',
#                             n = 60,
#                             size = 1,
#                             endian = 'big')
# }
#
# stopifnot(all(is.character(unlist(x = filenames))))
# stopifnot(length(unique(unlist(x = filenames))) == 1)
#
# acts <- do.call(what = rbind, args = acts)
# colnames(acts) <- paste0('act_', 1:60)
#
# lights <- do.call(what = rbind, args = lights)
# colnames(lights) <- paste0('light_', 1:60)
#
# wide_data <- cbind(data.frame(file_name = file_name,
#                               date = lubridate::mdy(unlist(dates)),
#                               hour = unlist(hours)
#                               #,second = unlist(seconds)
# ),
# acts,
# lights)
#
# long_act <- wide_data %>%
#   dplyr::select(-dplyr::matches('light')) %>%
#   tidyr::gather(key = min,
#                 value = act,
#                 act_1:act_60)
#
# long_light <- wide_data %>%
#   dplyr::select(-dplyr::matches('act')) %>%
#   tidyr::gather(key = min,
#                 value = light,
#                 light_1:light_60)
#
# dat <- long_act %>%
#   dplyr::as_data_frame() %>%
#   tidyr::separate(col = min, into = c('trash', 'min')) %>%
#   dplyr::select(-trash) %>%
#   dplyr::mutate(min = as.integer(min),
#                 light = long_light$light)
#
# # don't know what to do with very rare act = -61, just set to NA
# # 1 such row in test data (4 mice, 90 days per mouse)
# dat$act[d$act < -1] <- NA
#
# # not sure waht act = -1 means...probably some error code
# # like "couldn't measure activity"
# # 24 such rows in test data (4 mice, 90 days per mouse)
# dat$act[d$act == -1] <- NA
#
dat <- data
return(dat)
}
f <- file.path("~/GitHub/circr/hop_data/")
dat <- read_clock_file(file_name = list.files(path = f, full.names = TRUE)[1])
read_clock_file <- function(file_name) {
#act <- act_1 <- act_60 <- light <- light_1 <- light_60 <- trash <- 'fake_global_for_CRAN'
# file_name_byte_length <- 4
# bytes_per_hours_data <- 172
#
# file_name_start <- 4
# file_name_end <- 23
#
# date_start <- 28
# date_end <- 37
#
# seconds_start <- 38
# seconds_end <- 41
#
# hour_offset <- 42
#
# counts_start <- 48
# counts_end <- 107
#
# light_start <- 112
# light_end <- 171
#data <- readr::read_file_raw(file = file_name)
data <- read_delim(file_name, "\t", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE, show_col_types = FALSE)
data <- Filter(function(x)!all(is.na(x)), data)   #removes NA column 61
data <- na.omit(data)   #removes empty rows between birds
colnames(data) <- seq(1,60,1)   # numbers columns as minutes  1-60
data$filename <- file_name
# data$Cage <- rep(1:24, each=24)    #names ages 1-24
# data$Hour <- rep(seq(0,23,1), 24)   #assigns hours 0-23
data <- data %>% gather(Minutes, Hops, 1:60)
data$Minutes <- as.numeric(data$Minutes)
#Assign day/night to the correct hours
data$Phase <- NA
for (i in 1:nrow(data)) {
if (data$Hour[i] < 9 | data$Hour[i] >= 21) {
data$Phase[i] <- "night"
}
if (data$Hour[i] >= 9 & data$Hour[i] < 21) {
data$Phase[i] <- "day"
}
}
## re-format date
name <- paste(file_name)
#need to change this to be whatever input is
name <- gsub('C:/Users/Cassa/Documents/GitHub/circr/hop_data/', '', name)
name <- gsub('\\s', '-', name)
name <- gsub(',-', '-', name)
name <- gsub('.txt', '', name)
data$Date <- name
data$Date<- as.Date(data$Date, "%B-%d-%Y")
#Add treatment IDs
data$treat <- NA
for (i in 1:nrow(data)){
if (data$Cage[i]== 4 | data$Cage[i] == 6 | data$Cage[i]== 7 | data$Cage[i] == 13 | data$Cage[i] == 16 | data$Cage[i]==18 | data$Cage[i]== 21 | data$Cage[i]== 22 | data$Cage[i]== 23 | data$Cage[i]== 24) {
data$treat[i] <- "LD"}
if (data$Cage[i]== 1 | data$Cage[i] == 2 | data$Cage[i]== 3 | data$Cage[i] == 8 | data$Cage[i] == 14 | data$Cage[i]== 15 | data$Cage[i]== 20) {
data$treat[i] <- "LL"}
}
# data_length <- readBin(con = data[1:4],
#                        what = 'integer',
#                        size = file_name_byte_length,
#                        endian = 'big')
#
# num_hours <- num_hours <- (data_length - file_name_byte_length)/bytes_per_hours_data
#
# filenames <- dates <- hours <- seconds <- acts <- lights <- list()
#
# for (hour in 1:num_hours) {
#
#   hour_start <- (hour - 1)*bytes_per_hours_data + 5
#
#   filenames[[hour]] <- readBin(con = data[hour_start + (file_name_start:file_name_end)],
#                                what = 'character',
#                                endian = 'big')
#
#   dates[[hour]] <- readBin(con = data[hour_start + (date_start:date_end)],
#                            what = 'character',
#                            endian = 'big')
#
#   hours[[hour]] <- readBin(con = data[hour_start + hour_offset],
#                            what = 'integer',
#                            n = 1,
#                            size = 1,
#                            endian = 'big')
#
#   # browser()
#   # doesn't work -- need to read a 4-byte unsigned int
#   # seconds[[hour]] <- readBin(con = data[hour_start + (seconds_start:seconds_end)],
#   #                            what = 'integer',
#   #                            size = 2,
#   #                            n = 1,
#   #                            endian = 'big',
#   #                            signed = FALSE)
#
#   acts[[hour]] <- readBin(con = data[hour_start + (counts_start:counts_end)],
#                           what = 'integer',
#                           n = 60,
#                           size = 1,
#                           endian = 'big')
#
#   lights[[hour]] <- readBin(con = data[hour_start + (light_start:light_end)],
#                             what = 'integer',
#                             n = 60,
#                             size = 1,
#                             endian = 'big')
# }
#
# stopifnot(all(is.character(unlist(x = filenames))))
# stopifnot(length(unique(unlist(x = filenames))) == 1)
#
# acts <- do.call(what = rbind, args = acts)
# colnames(acts) <- paste0('act_', 1:60)
#
# lights <- do.call(what = rbind, args = lights)
# colnames(lights) <- paste0('light_', 1:60)
#
# wide_data <- cbind(data.frame(file_name = file_name,
#                               date = lubridate::mdy(unlist(dates)),
#                               hour = unlist(hours)
#                               #,second = unlist(seconds)
# ),
# acts,
# lights)
#
# long_act <- wide_data %>%
#   dplyr::select(-dplyr::matches('light')) %>%
#   tidyr::gather(key = min,
#                 value = act,
#                 act_1:act_60)
#
# long_light <- wide_data %>%
#   dplyr::select(-dplyr::matches('act')) %>%
#   tidyr::gather(key = min,
#                 value = light,
#                 light_1:light_60)
#
# dat <- long_act %>%
#   dplyr::as_data_frame() %>%
#   tidyr::separate(col = min, into = c('trash', 'min')) %>%
#   dplyr::select(-trash) %>%
#   dplyr::mutate(min = as.integer(min),
#                 light = long_light$light)
#
# # don't know what to do with very rare act = -61, just set to NA
# # 1 such row in test data (4 mice, 90 days per mouse)
# dat$act[d$act < -1] <- NA
#
# # not sure waht act = -1 means...probably some error code
# # like "couldn't measure activity"
# # 24 such rows in test data (4 mice, 90 days per mouse)
# dat$act[d$act == -1] <- NA
#
dat <- data
return(dat)
}
f <- file.path("~/GitHub/circr/hop_data/")
dat <- read_clock_file(file_name = list.files(path = f, full.names = TRUE)[1])
